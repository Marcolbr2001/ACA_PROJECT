-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity alv_MIMD_load_data_and_op is
port (
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    a : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    b : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    op : IN STD_LOGIC_VECTOR (63 downto 0);
    ALU_operation_MEM_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ALU_operation_MEM_ce0 : OUT STD_LOGIC;
    ALU_operation_MEM_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ALU_operation_MEM_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ALU_operation_MEM_we0 : OUT STD_LOGIC;
    ALU_operation_MEM_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ALU_operation_MEM_ce1 : OUT STD_LOGIC;
    ALU_operation_MEM_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ALU_operation_MEM_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ALU_operation_MEM_we1 : OUT STD_LOGIC;
    data_a_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_a_full_n : IN STD_LOGIC;
    data_a_write : OUT STD_LOGIC;
    data_b_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_b_full_n : IN STD_LOGIC;
    data_b_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    op_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ALU_operation_MEM_full_n : IN STD_LOGIC;
    ALU_operation_MEM_write : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    a_ap_vld : IN STD_LOGIC;
    b_ap_vld : IN STD_LOGIC;
    ALU_operation_din : IN STD_LOGIC_VECTOR (31 downto 0);
    ALU_operation_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
    ALU_operation_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
    ALU_operation_full_n : OUT STD_LOGIC;
    ALU_operation_write : IN STD_LOGIC;
    ALU_operation_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
    ALU_operation_empty_n : OUT STD_LOGIC;
    ALU_operation_read : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of alv_MIMD_load_data_and_op is 
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal load_op_U0_ap_start : STD_LOGIC;
    signal load_op_U0_ap_done : STD_LOGIC;
    signal load_op_U0_ap_continue : STD_LOGIC;
    signal load_op_U0_ap_idle : STD_LOGIC;
    signal load_op_U0_ap_ready : STD_LOGIC;
    signal load_op_U0_m_axi_gmem3_AWVALID : STD_LOGIC;
    signal load_op_U0_m_axi_gmem3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_op_U0_m_axi_gmem3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_op_U0_m_axi_gmem3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_op_U0_m_axi_gmem3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_op_U0_m_axi_gmem3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_op_U0_m_axi_gmem3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_op_U0_m_axi_gmem3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_op_U0_m_axi_gmem3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_op_U0_m_axi_gmem3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_op_U0_m_axi_gmem3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_op_U0_m_axi_gmem3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_op_U0_m_axi_gmem3_WVALID : STD_LOGIC;
    signal load_op_U0_m_axi_gmem3_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal load_op_U0_m_axi_gmem3_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal load_op_U0_m_axi_gmem3_WLAST : STD_LOGIC;
    signal load_op_U0_m_axi_gmem3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_op_U0_m_axi_gmem3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_op_U0_m_axi_gmem3_ARVALID : STD_LOGIC;
    signal load_op_U0_m_axi_gmem3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_op_U0_m_axi_gmem3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_op_U0_m_axi_gmem3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_op_U0_m_axi_gmem3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_op_U0_m_axi_gmem3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_op_U0_m_axi_gmem3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_op_U0_m_axi_gmem3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_op_U0_m_axi_gmem3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_op_U0_m_axi_gmem3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_op_U0_m_axi_gmem3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_op_U0_m_axi_gmem3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_op_U0_m_axi_gmem3_RREADY : STD_LOGIC;
    signal load_op_U0_m_axi_gmem3_BREADY : STD_LOGIC;
    signal load_op_U0_ALU_operation_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_op_U0_ALU_operation_write : STD_LOGIC;
    signal load_op_U0_start_out : STD_LOGIC;
    signal load_op_U0_start_write : STD_LOGIC;
    signal store_op_U0_ap_start : STD_LOGIC;
    signal store_op_U0_ap_done : STD_LOGIC;
    signal store_op_U0_ap_continue : STD_LOGIC;
    signal store_op_U0_ap_idle : STD_LOGIC;
    signal store_op_U0_ap_ready : STD_LOGIC;
    signal store_op_U0_ALU_operation_read : STD_LOGIC;
    signal store_op_U0_ALU_operation_MEM_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal store_op_U0_ALU_operation_MEM_ce0 : STD_LOGIC;
    signal store_op_U0_ALU_operation_MEM_we0 : STD_LOGIC;
    signal store_op_U0_ALU_operation_MEM_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal store_op_U0_ALU_operation_MEM_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal load_data_a_3_U0_ap_start : STD_LOGIC;
    signal load_data_a_3_U0_ap_done : STD_LOGIC;
    signal load_data_a_3_U0_ap_continue : STD_LOGIC;
    signal load_data_a_3_U0_ap_idle : STD_LOGIC;
    signal load_data_a_3_U0_ap_ready : STD_LOGIC;
    signal load_data_a_3_U0_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal load_data_a_3_U0_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_WVALID : STD_LOGIC;
    signal load_data_a_3_U0_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_WLAST : STD_LOGIC;
    signal load_data_a_3_U0_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal load_data_a_3_U0_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data_a_3_U0_m_axi_gmem0_RREADY : STD_LOGIC;
    signal load_data_a_3_U0_m_axi_gmem0_BREADY : STD_LOGIC;
    signal load_data_a_3_U0_data_a_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_data_a_3_U0_data_a_write : STD_LOGIC;
    signal load_data_b_4_U0_ap_start : STD_LOGIC;
    signal load_data_b_4_U0_ap_done : STD_LOGIC;
    signal load_data_b_4_U0_ap_continue : STD_LOGIC;
    signal load_data_b_4_U0_ap_idle : STD_LOGIC;
    signal load_data_b_4_U0_ap_ready : STD_LOGIC;
    signal load_data_b_4_U0_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal load_data_b_4_U0_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_WVALID : STD_LOGIC;
    signal load_data_b_4_U0_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_WLAST : STD_LOGIC;
    signal load_data_b_4_U0_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal load_data_b_4_U0_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data_b_4_U0_m_axi_gmem1_RREADY : STD_LOGIC;
    signal load_data_b_4_U0_m_axi_gmem1_BREADY : STD_LOGIC;
    signal load_data_b_4_U0_data_b_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_data_b_4_U0_data_b_write : STD_LOGIC;
    signal ALU_operation_full_n_x : STD_LOGIC;
    signal ALU_operation_num_data_valid_x : STD_LOGIC_VECTOR (2 downto 0);
    signal ALU_operation_fifo_cap_x : STD_LOGIC_VECTOR (2 downto 0);
    signal ALU_operation_empty_n_x : STD_LOGIC;
    signal ALU_operation_dout_x : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_load_op_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_load_op_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_load_data_a_3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_load_data_a_3_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_load_data_b_4_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_load_data_b_4_U0_ap_ready : STD_LOGIC;
    signal start_for_store_op_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_op_U0_full_n : STD_LOGIC;
    signal start_for_store_op_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_op_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component alv_MIMD_load_op IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem3_AWVALID : OUT STD_LOGIC;
        m_axi_gmem3_AWREADY : IN STD_LOGIC;
        m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WVALID : OUT STD_LOGIC;
        m_axi_gmem3_WREADY : IN STD_LOGIC;
        m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_WLAST : OUT STD_LOGIC;
        m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARVALID : OUT STD_LOGIC;
        m_axi_gmem3_ARREADY : IN STD_LOGIC;
        m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RVALID : IN STD_LOGIC;
        m_axi_gmem3_RREADY : OUT STD_LOGIC;
        m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_RLAST : IN STD_LOGIC;
        m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BVALID : IN STD_LOGIC;
        m_axi_gmem3_BREADY : OUT STD_LOGIC;
        m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ALU_operation_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ALU_operation_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        ALU_operation_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        ALU_operation_full_n : IN STD_LOGIC;
        ALU_operation_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        op : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component alv_MIMD_store_op IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ALU_operation_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ALU_operation_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        ALU_operation_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        ALU_operation_empty_n : IN STD_LOGIC;
        ALU_operation_read : OUT STD_LOGIC;
        ALU_operation_MEM_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ALU_operation_MEM_ce0 : OUT STD_LOGIC;
        ALU_operation_MEM_we0 : OUT STD_LOGIC;
        ALU_operation_MEM_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component alv_MIMD_load_data_a_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        data_a_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_a_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        data_a_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        data_a_full_n : IN STD_LOGIC;
        data_a_write : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component alv_MIMD_load_data_b_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        data_b_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_b_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        data_b_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        data_b_full_n : IN STD_LOGIC;
        data_b_write : OUT STD_LOGIC;
        b : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component alv_MIMD_fifo_w32_d2 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component alv_MIMD_start_for_store_op_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    load_op_U0 : component alv_MIMD_load_op
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => load_op_U0_ap_start,
        start_full_n => start_for_store_op_U0_full_n,
        ap_done => load_op_U0_ap_done,
        ap_continue => load_op_U0_ap_continue,
        ap_idle => load_op_U0_ap_idle,
        ap_ready => load_op_U0_ap_ready,
        m_axi_gmem3_AWVALID => load_op_U0_m_axi_gmem3_AWVALID,
        m_axi_gmem3_AWREADY => ap_const_logic_0,
        m_axi_gmem3_AWADDR => load_op_U0_m_axi_gmem3_AWADDR,
        m_axi_gmem3_AWID => load_op_U0_m_axi_gmem3_AWID,
        m_axi_gmem3_AWLEN => load_op_U0_m_axi_gmem3_AWLEN,
        m_axi_gmem3_AWSIZE => load_op_U0_m_axi_gmem3_AWSIZE,
        m_axi_gmem3_AWBURST => load_op_U0_m_axi_gmem3_AWBURST,
        m_axi_gmem3_AWLOCK => load_op_U0_m_axi_gmem3_AWLOCK,
        m_axi_gmem3_AWCACHE => load_op_U0_m_axi_gmem3_AWCACHE,
        m_axi_gmem3_AWPROT => load_op_U0_m_axi_gmem3_AWPROT,
        m_axi_gmem3_AWQOS => load_op_U0_m_axi_gmem3_AWQOS,
        m_axi_gmem3_AWREGION => load_op_U0_m_axi_gmem3_AWREGION,
        m_axi_gmem3_AWUSER => load_op_U0_m_axi_gmem3_AWUSER,
        m_axi_gmem3_WVALID => load_op_U0_m_axi_gmem3_WVALID,
        m_axi_gmem3_WREADY => ap_const_logic_0,
        m_axi_gmem3_WDATA => load_op_U0_m_axi_gmem3_WDATA,
        m_axi_gmem3_WSTRB => load_op_U0_m_axi_gmem3_WSTRB,
        m_axi_gmem3_WLAST => load_op_U0_m_axi_gmem3_WLAST,
        m_axi_gmem3_WID => load_op_U0_m_axi_gmem3_WID,
        m_axi_gmem3_WUSER => load_op_U0_m_axi_gmem3_WUSER,
        m_axi_gmem3_ARVALID => load_op_U0_m_axi_gmem3_ARVALID,
        m_axi_gmem3_ARREADY => m_axi_gmem3_ARREADY,
        m_axi_gmem3_ARADDR => load_op_U0_m_axi_gmem3_ARADDR,
        m_axi_gmem3_ARID => load_op_U0_m_axi_gmem3_ARID,
        m_axi_gmem3_ARLEN => load_op_U0_m_axi_gmem3_ARLEN,
        m_axi_gmem3_ARSIZE => load_op_U0_m_axi_gmem3_ARSIZE,
        m_axi_gmem3_ARBURST => load_op_U0_m_axi_gmem3_ARBURST,
        m_axi_gmem3_ARLOCK => load_op_U0_m_axi_gmem3_ARLOCK,
        m_axi_gmem3_ARCACHE => load_op_U0_m_axi_gmem3_ARCACHE,
        m_axi_gmem3_ARPROT => load_op_U0_m_axi_gmem3_ARPROT,
        m_axi_gmem3_ARQOS => load_op_U0_m_axi_gmem3_ARQOS,
        m_axi_gmem3_ARREGION => load_op_U0_m_axi_gmem3_ARREGION,
        m_axi_gmem3_ARUSER => load_op_U0_m_axi_gmem3_ARUSER,
        m_axi_gmem3_RVALID => m_axi_gmem3_RVALID,
        m_axi_gmem3_RREADY => load_op_U0_m_axi_gmem3_RREADY,
        m_axi_gmem3_RDATA => m_axi_gmem3_RDATA,
        m_axi_gmem3_RLAST => m_axi_gmem3_RLAST,
        m_axi_gmem3_RID => m_axi_gmem3_RID,
        m_axi_gmem3_RFIFONUM => m_axi_gmem3_RFIFONUM,
        m_axi_gmem3_RUSER => m_axi_gmem3_RUSER,
        m_axi_gmem3_RRESP => m_axi_gmem3_RRESP,
        m_axi_gmem3_BVALID => ap_const_logic_0,
        m_axi_gmem3_BREADY => load_op_U0_m_axi_gmem3_BREADY,
        m_axi_gmem3_BRESP => ap_const_lv2_0,
        m_axi_gmem3_BID => ap_const_lv1_0,
        m_axi_gmem3_BUSER => ap_const_lv1_0,
        ALU_operation_din => load_op_U0_ALU_operation_din,
        ALU_operation_num_data_valid => ALU_operation_num_data_valid_x,
        ALU_operation_fifo_cap => ALU_operation_fifo_cap_x,
        ALU_operation_full_n => ALU_operation_full_n_x,
        ALU_operation_write => load_op_U0_ALU_operation_write,
        start_out => load_op_U0_start_out,
        start_write => load_op_U0_start_write,
        op => op);

    store_op_U0 : component alv_MIMD_store_op
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => store_op_U0_ap_start,
        ap_done => store_op_U0_ap_done,
        ap_continue => store_op_U0_ap_continue,
        ap_idle => store_op_U0_ap_idle,
        ap_ready => store_op_U0_ap_ready,
        ALU_operation_dout => ALU_operation_dout_x,
        ALU_operation_num_data_valid => ALU_operation_num_data_valid_x,
        ALU_operation_fifo_cap => ALU_operation_fifo_cap_x,
        ALU_operation_empty_n => ALU_operation_empty_n_x,
        ALU_operation_read => store_op_U0_ALU_operation_read,
        ALU_operation_MEM_address0 => store_op_U0_ALU_operation_MEM_address0,
        ALU_operation_MEM_ce0 => store_op_U0_ALU_operation_MEM_ce0,
        ALU_operation_MEM_we0 => store_op_U0_ALU_operation_MEM_we0,
        ALU_operation_MEM_d0 => store_op_U0_ALU_operation_MEM_d0);

    load_data_a_3_U0 : component alv_MIMD_load_data_a_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => load_data_a_3_U0_ap_start,
        ap_done => load_data_a_3_U0_ap_done,
        ap_continue => load_data_a_3_U0_ap_continue,
        ap_idle => load_data_a_3_U0_ap_idle,
        ap_ready => load_data_a_3_U0_ap_ready,
        m_axi_gmem0_AWVALID => load_data_a_3_U0_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => load_data_a_3_U0_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => load_data_a_3_U0_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => load_data_a_3_U0_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => load_data_a_3_U0_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => load_data_a_3_U0_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => load_data_a_3_U0_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => load_data_a_3_U0_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => load_data_a_3_U0_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => load_data_a_3_U0_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => load_data_a_3_U0_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => load_data_a_3_U0_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => load_data_a_3_U0_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => load_data_a_3_U0_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => load_data_a_3_U0_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => load_data_a_3_U0_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => load_data_a_3_U0_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => load_data_a_3_U0_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => load_data_a_3_U0_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR => load_data_a_3_U0_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => load_data_a_3_U0_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => load_data_a_3_U0_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => load_data_a_3_U0_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => load_data_a_3_U0_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => load_data_a_3_U0_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => load_data_a_3_U0_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => load_data_a_3_U0_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => load_data_a_3_U0_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => load_data_a_3_U0_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => load_data_a_3_U0_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY => load_data_a_3_U0_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST => m_axi_gmem0_RLAST,
        m_axi_gmem0_RID => m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM => m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP => m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => load_data_a_3_U0_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        data_a_din => load_data_a_3_U0_data_a_din,
        data_a_num_data_valid => ap_const_lv3_0,
        data_a_fifo_cap => ap_const_lv3_0,
        data_a_full_n => data_a_full_n,
        data_a_write => load_data_a_3_U0_data_a_write,
        a => a);

    load_data_b_4_U0 : component alv_MIMD_load_data_b_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => load_data_b_4_U0_ap_start,
        ap_done => load_data_b_4_U0_ap_done,
        ap_continue => load_data_b_4_U0_ap_continue,
        ap_idle => load_data_b_4_U0_ap_idle,
        ap_ready => load_data_b_4_U0_ap_ready,
        m_axi_gmem1_AWVALID => load_data_b_4_U0_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => ap_const_logic_0,
        m_axi_gmem1_AWADDR => load_data_b_4_U0_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => load_data_b_4_U0_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => load_data_b_4_U0_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => load_data_b_4_U0_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => load_data_b_4_U0_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => load_data_b_4_U0_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => load_data_b_4_U0_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => load_data_b_4_U0_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => load_data_b_4_U0_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => load_data_b_4_U0_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => load_data_b_4_U0_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => load_data_b_4_U0_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => ap_const_logic_0,
        m_axi_gmem1_WDATA => load_data_b_4_U0_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => load_data_b_4_U0_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => load_data_b_4_U0_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => load_data_b_4_U0_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => load_data_b_4_U0_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => load_data_b_4_U0_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR => load_data_b_4_U0_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => load_data_b_4_U0_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => load_data_b_4_U0_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => load_data_b_4_U0_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => load_data_b_4_U0_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => load_data_b_4_U0_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => load_data_b_4_U0_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => load_data_b_4_U0_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => load_data_b_4_U0_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => load_data_b_4_U0_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => load_data_b_4_U0_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY => load_data_b_4_U0_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST => m_axi_gmem1_RLAST,
        m_axi_gmem1_RID => m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM => m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER => m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP => m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID => ap_const_logic_0,
        m_axi_gmem1_BREADY => load_data_b_4_U0_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => ap_const_lv2_0,
        m_axi_gmem1_BID => ap_const_lv1_0,
        m_axi_gmem1_BUSER => ap_const_lv1_0,
        data_b_din => load_data_b_4_U0_data_b_din,
        data_b_num_data_valid => ap_const_lv3_0,
        data_b_fifo_cap => ap_const_lv3_0,
        data_b_full_n => data_b_full_n,
        data_b_write => load_data_b_4_U0_data_b_write,
        b => b);

    ALU_operation_U : component alv_MIMD_fifo_w32_d2
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ALU_operation_din,
        if_full_n => ALU_operation_num_data_valid,
        if_write => ALU_operation_fifo_cap,
        if_dout => ALU_operation_dout,
        if_num_data_valid => ALU_operation_num_data_valid,
        if_fifo_cap => ALU_operation_fifo_cap,
        if_empty_n => ALU_operation_empty_n,
        if_read => ALU_operation_read);

    start_for_store_op_U0_U : component alv_MIMD_start_for_store_op_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_store_op_U0_din,
        if_full_n => start_for_store_op_U0_full_n,
        if_write => load_op_U0_start_write,
        if_dout => start_for_store_op_U0_dout,
        if_empty_n => start_for_store_op_U0_empty_n,
        if_read => store_op_U0_ap_ready);





    ap_sync_reg_load_data_a_3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_load_data_a_3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_load_data_a_3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_load_data_a_3_U0_ap_ready <= ap_sync_load_data_a_3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_load_data_b_4_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_load_data_b_4_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_load_data_b_4_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_load_data_b_4_U0_ap_ready <= ap_sync_load_data_b_4_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_load_op_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_load_op_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_load_op_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_load_op_U0_ap_ready <= ap_sync_load_op_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ALU_operation_MEM_address0 <= store_op_U0_ALU_operation_MEM_address0;
    ALU_operation_MEM_address1 <= ap_const_lv6_0;
    ALU_operation_MEM_ce0 <= store_op_U0_ALU_operation_MEM_ce0;
    ALU_operation_MEM_ce1 <= ap_const_logic_0;
    ALU_operation_MEM_d0 <= store_op_U0_ALU_operation_MEM_d0;
    ALU_operation_MEM_d1 <= ap_const_lv32_0;
    ALU_operation_MEM_we0 <= store_op_U0_ALU_operation_MEM_we0;
    ALU_operation_MEM_we1 <= ap_const_logic_0;
    ALU_operation_MEM_write <= store_op_U0_ALU_operation_MEM_write;
    ALU_operation_dout_x <= ap_const_lv32_0;
    ALU_operation_empty_n_x <= ap_const_logic_0;
    ALU_operation_fifo_cap_x <= ap_const_lv3_0;
    ALU_operation_full_n <= ap_const_logic_0;
    ALU_operation_full_n_x <= ap_const_logic_0;
    ALU_operation_num_data_valid_x <= ap_const_lv3_0;
    ap_done <= ap_sync_done;
    ap_idle <= (store_op_U0_ap_idle and load_op_U0_ap_idle and load_data_b_4_U0_ap_idle and load_data_a_3_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (store_op_U0_ap_done and load_data_b_4_U0_ap_done and load_data_a_3_U0_ap_done);
    ap_sync_load_data_a_3_U0_ap_ready <= (load_data_a_3_U0_ap_ready or ap_sync_reg_load_data_a_3_U0_ap_ready);
    ap_sync_load_data_b_4_U0_ap_ready <= (load_data_b_4_U0_ap_ready or ap_sync_reg_load_data_b_4_U0_ap_ready);
    ap_sync_load_op_U0_ap_ready <= (load_op_U0_ap_ready or ap_sync_reg_load_op_U0_ap_ready);
    ap_sync_ready <= (ap_sync_load_op_U0_ap_ready and ap_sync_load_data_b_4_U0_ap_ready and ap_sync_load_data_a_3_U0_ap_ready);
    data_a_din <= load_data_a_3_U0_data_a_din;
    data_a_write <= load_data_a_3_U0_data_a_write;
    data_b_din <= load_data_b_4_U0_data_b_din;
    data_b_write <= load_data_b_4_U0_data_b_write;
    load_data_a_3_U0_ap_continue <= ap_sync_continue;
    load_data_a_3_U0_ap_start <= ((ap_sync_reg_load_data_a_3_U0_ap_ready xor ap_const_logic_1) and ap_start);
    load_data_b_4_U0_ap_continue <= ap_sync_continue;
    load_data_b_4_U0_ap_start <= ((ap_sync_reg_load_data_b_4_U0_ap_ready xor ap_const_logic_1) and ap_start);
    load_op_U0_ap_continue <= ap_const_logic_1;
    load_op_U0_ap_start <= ((ap_sync_reg_load_op_U0_ap_ready xor ap_const_logic_1) and ap_start);
    m_axi_gmem0_ARADDR <= load_data_a_3_U0_m_axi_gmem0_ARADDR;
    m_axi_gmem0_ARBURST <= load_data_a_3_U0_m_axi_gmem0_ARBURST;
    m_axi_gmem0_ARCACHE <= load_data_a_3_U0_m_axi_gmem0_ARCACHE;
    m_axi_gmem0_ARID <= load_data_a_3_U0_m_axi_gmem0_ARID;
    m_axi_gmem0_ARLEN <= load_data_a_3_U0_m_axi_gmem0_ARLEN;
    m_axi_gmem0_ARLOCK <= load_data_a_3_U0_m_axi_gmem0_ARLOCK;
    m_axi_gmem0_ARPROT <= load_data_a_3_U0_m_axi_gmem0_ARPROT;
    m_axi_gmem0_ARQOS <= load_data_a_3_U0_m_axi_gmem0_ARQOS;
    m_axi_gmem0_ARREGION <= load_data_a_3_U0_m_axi_gmem0_ARREGION;
    m_axi_gmem0_ARSIZE <= load_data_a_3_U0_m_axi_gmem0_ARSIZE;
    m_axi_gmem0_ARUSER <= load_data_a_3_U0_m_axi_gmem0_ARUSER;
    m_axi_gmem0_ARVALID <= load_data_a_3_U0_m_axi_gmem0_ARVALID;
    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;
    m_axi_gmem0_RREADY <= load_data_a_3_U0_m_axi_gmem0_RREADY;
    m_axi_gmem0_WDATA <= ap_const_lv32_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    m_axi_gmem1_ARADDR <= load_data_b_4_U0_m_axi_gmem1_ARADDR;
    m_axi_gmem1_ARBURST <= load_data_b_4_U0_m_axi_gmem1_ARBURST;
    m_axi_gmem1_ARCACHE <= load_data_b_4_U0_m_axi_gmem1_ARCACHE;
    m_axi_gmem1_ARID <= load_data_b_4_U0_m_axi_gmem1_ARID;
    m_axi_gmem1_ARLEN <= load_data_b_4_U0_m_axi_gmem1_ARLEN;
    m_axi_gmem1_ARLOCK <= load_data_b_4_U0_m_axi_gmem1_ARLOCK;
    m_axi_gmem1_ARPROT <= load_data_b_4_U0_m_axi_gmem1_ARPROT;
    m_axi_gmem1_ARQOS <= load_data_b_4_U0_m_axi_gmem1_ARQOS;
    m_axi_gmem1_ARREGION <= load_data_b_4_U0_m_axi_gmem1_ARREGION;
    m_axi_gmem1_ARSIZE <= load_data_b_4_U0_m_axi_gmem1_ARSIZE;
    m_axi_gmem1_ARUSER <= load_data_b_4_U0_m_axi_gmem1_ARUSER;
    m_axi_gmem1_ARVALID <= load_data_b_4_U0_m_axi_gmem1_ARVALID;
    m_axi_gmem1_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_BREADY <= ap_const_logic_0;
    m_axi_gmem1_RREADY <= load_data_b_4_U0_m_axi_gmem1_RREADY;
    m_axi_gmem1_WDATA <= ap_const_lv32_0;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv4_0;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;
    m_axi_gmem1_WVALID <= ap_const_logic_0;
    m_axi_gmem3_ARADDR <= load_op_U0_m_axi_gmem3_ARADDR;
    m_axi_gmem3_ARBURST <= load_op_U0_m_axi_gmem3_ARBURST;
    m_axi_gmem3_ARCACHE <= load_op_U0_m_axi_gmem3_ARCACHE;
    m_axi_gmem3_ARID <= load_op_U0_m_axi_gmem3_ARID;
    m_axi_gmem3_ARLEN <= load_op_U0_m_axi_gmem3_ARLEN;
    m_axi_gmem3_ARLOCK <= load_op_U0_m_axi_gmem3_ARLOCK;
    m_axi_gmem3_ARPROT <= load_op_U0_m_axi_gmem3_ARPROT;
    m_axi_gmem3_ARQOS <= load_op_U0_m_axi_gmem3_ARQOS;
    m_axi_gmem3_ARREGION <= load_op_U0_m_axi_gmem3_ARREGION;
    m_axi_gmem3_ARSIZE <= load_op_U0_m_axi_gmem3_ARSIZE;
    m_axi_gmem3_ARUSER <= load_op_U0_m_axi_gmem3_ARUSER;
    m_axi_gmem3_ARVALID <= load_op_U0_m_axi_gmem3_ARVALID;
    m_axi_gmem3_AWADDR <= ap_const_lv64_0;
    m_axi_gmem3_AWBURST <= ap_const_lv2_0;
    m_axi_gmem3_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem3_AWID <= ap_const_lv1_0;
    m_axi_gmem3_AWLEN <= ap_const_lv32_0;
    m_axi_gmem3_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem3_AWPROT <= ap_const_lv3_0;
    m_axi_gmem3_AWQOS <= ap_const_lv4_0;
    m_axi_gmem3_AWREGION <= ap_const_lv4_0;
    m_axi_gmem3_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem3_AWUSER <= ap_const_lv1_0;
    m_axi_gmem3_AWVALID <= ap_const_logic_0;
    m_axi_gmem3_BREADY <= ap_const_logic_0;
    m_axi_gmem3_RREADY <= load_op_U0_m_axi_gmem3_RREADY;
    m_axi_gmem3_WDATA <= ap_const_lv32_0;
    m_axi_gmem3_WID <= ap_const_lv1_0;
    m_axi_gmem3_WLAST <= ap_const_logic_0;
    m_axi_gmem3_WSTRB <= ap_const_lv4_0;
    m_axi_gmem3_WUSER <= ap_const_lv1_0;
    m_axi_gmem3_WVALID <= ap_const_logic_0;
    start_for_store_op_U0_din <= (0=>ap_const_logic_1, others=>'-');
    store_op_U0_ALU_operation_MEM_write <= ap_const_logic_0;
    store_op_U0_ap_continue <= ap_sync_continue;
    store_op_U0_ap_start <= start_for_store_op_U0_empty_n;
end behav;
